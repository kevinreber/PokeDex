{"version":3,"sources":["components/pokeball.png","components/Pokeball.js","components/Header.js","hooks/useAxios.js","components/Card.js","components/Modal.js","components/Pokedex.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Pokeball","className","src","pokeball","alt","Header","id","BASE_URL","useAxios","start","end","useState","responses","setResponse","errors","setErrors","isLoading","setIsLoading","useEffect","a","results","i","axios","get","resp","push","data","map","r","p","name","image","sprites","shiny","type","types","join","toUpperCase","abilities","ability","stats","stat","base","base_stat","getData","Card","props","onClick","toggleModal","Modal","slice","navigateModal","data-nav","Pokedex","pokemon","modalShow","setModalShow","pokeModal","setPokeModal","search","setSearch","searchPoke","setSearchPoke","filter","toLowerCase","includes","e","target","m","parent","closest","pokemons","length","key","placeholder","value","onChange","dataset","nav","prev","next","App","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,sC,mLCS5BC,MANf,WACI,OACI,yBAAKC,UAAU,SAASC,IAAKC,IAAUC,IAAI,cCapCC,MAff,WACI,OACI,oCACI,gCACI,yBAAKC,GAAG,YACR,wBAAIA,GAAG,SACH,kBAAC,EAAD,MADJ,UAGI,kBAAC,EAAD,U,wDCRdC,EAAW,oCAgDFC,MA9Cf,WAAmC,IAAjBC,EAAgB,uDAAV,EAAEC,EAAQ,uDAAJ,IAAI,EACGC,mBAAS,IADZ,mBACvBC,EADuB,KACZC,EADY,OAEFF,mBAAS,MAFP,mBAEvBG,EAFuB,KAEfC,EAFe,OAGIJ,oBAAS,GAHb,mBAGvBK,EAHuB,KAGZC,EAHY,KA2C9B,OArCAC,qBAAU,WAiCFF,GAhCS,uCAAG,gCAAAG,EAAA,+DAEJC,EAAU,GAELC,EAAIZ,EAJL,YAIYY,GAAKX,GAJjB,iCAKaY,IAAMC,IAAN,UAAahB,EAAb,YAAyBc,IALtC,OAKAG,EALA,OAMJJ,EAAQK,KAAKD,EAAKE,MANd,OAIsBL,IAJtB,uBASRD,EAAQO,KAAI,SAAAC,GACJf,GAAY,SAAAgB,GAAC,4BAAQA,GAAR,CACb,CACIC,KAAMF,EAAEE,KACRxB,GAAIsB,EAAEtB,GACNyB,MAAOH,EAAEI,QAAF,cACPC,MAAOL,EAAEI,QAAF,YACPE,KAAMN,EAAEO,MAAMR,KAAI,SAAAO,GAAI,OAAIA,EAAKA,KAAKJ,QAAMM,KAAK,KAAKC,cACpDC,UAAWV,EAAEU,UAAUX,KAAI,SAAAY,GAAO,OAAIA,EAAQA,QAAQT,QAAMM,KAAK,MACjEI,MAAOZ,EAAEY,MAAMb,KAAI,SAAAc,GACf,MAAO,CAACX,KAAMW,EAAKA,KAAKX,KAAMY,KAAMD,EAAKE,uBAnBjD,kDAyBR5B,EAAU,EAAD,IAzBD,QA4BZE,GAAa,GA5BD,0DAAH,oDAiCT2B,KAEL,IACI,CAAChC,EAAWE,EAAQE,IClChB6B,MAZf,SAAcC,GACV,OACI,oCACA,wBAAIxC,GAAIwC,EAAMxC,GAAIL,UAAU,OAAO8C,QAASD,EAAME,aAC9C,yBAAK/C,UAAU,aAAaC,IAAK4C,EAAMf,MAAO3B,IAAK0C,EAAMhB,OACzD,wBAAI7B,UAAU,cAAd,IAA6B6C,EAAMxC,GAAnC,IAAwCwC,EAAMhB,KAA9C,KACA,uBAAG7B,UAAU,iBAAb,SAAoC6C,EAAMZ,SCiCvCe,MAvCf,SAAeH,GAEX,IAAIN,EAOJ,OANGM,EAAMN,QACNA,EAAQM,EAAMN,MAAMb,KAAI,SAAAc,GAAI,OACvB,0BAAMxC,UAAU,cAAcwC,EAAKX,KAAK,GAAGO,cAAgBI,EAAKX,KAAKoB,MAAM,GAA3E,KAAiFT,EAAKC,KAAtF,SAKJ,oCACI,yBAAKK,QAASD,EAAME,YAAa/C,UAAU,iBACvC,yBAAKA,UAAU,yBACX,yBAAK8C,QAASD,EAAMK,cAAeC,WAAS,OAAOnD,UAAU,2BACzD,0BAAMmD,WAAS,QAAf,SAGR,yBAAKnD,UAAU,cACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,aAAaC,IAAK4C,EAAMf,MAAO3B,IAAI,iBAClD,yBAAKH,UAAU,aAAaC,IAAK4C,EAAMb,MAAO7B,IAAI,kBAEtD,yBAAKH,UAAU,cACX,wBAAIA,UAAU,0BAAd,IAAyC6C,EAAMxC,GAA/C,IAAoDwC,EAAMhB,KAA1D,KACA,uBAAG7B,UAAU,4BAAb,SAA+C6C,EAAMZ,MACrD,uBAAGjC,UAAU,4BAAb,cAAoD6C,EAAMR,WAC1D,uBAAGrC,UAAU,wCAAwCuC,KAG7D,yBAAKvC,UAAU,yBACX,yBAAK8C,QAASD,EAAMK,cAAeC,WAAS,OAAOnD,UAAU,2BACzD,0BAAMmD,WAAS,QAAf,YC0ETC,MAtGf,WAAkB,MAEuB7C,EAAS,EAAE,KAFlC,mBAEP8C,EAFO,KAEExC,EAFF,KAEUE,EAFV,OAIoBL,oBAAS,GAJ7B,mBAIP4C,EAJO,KAIIC,EAJJ,OAMoB7C,mBAAS,MAN7B,mBAMP8C,EANO,KAMIC,EANJ,OAQa/C,mBAAS,IARtB,mBAQRgD,EARQ,KAQAC,EARA,OASsBjD,mBAAS,IAT/B,mBASPkD,EATO,KASKC,EATL,KAiBd5C,qBAAU,WACN,IAAME,EAAUkC,EAAQS,QAAO,SAAAlC,GAAC,OAAIA,EAAEK,KAAK8B,cAAcC,SAASN,MAClEG,EAAc1C,KAChB,CAACuC,EAAQC,IAIX,IAAMZ,EAAc,SAACkB,GAIjB,GAA0B,kBAAvBA,EAAEC,OAAOlE,YAAkCsD,EAI1C,GAHAC,GAAc,SAAAY,GAAC,OAASA,KAGrBb,EACCG,EAAa,UACV,CAEH,IAAMW,EAASH,EAAEC,OAAOG,QAAQ,MAChCZ,EAAaW,EAAO/D,GAAK,KAoBrC,GAAIQ,EACA,OAAQ,wBAAIR,GAAG,WAAP,iCAIZ,IAGMiE,GAH8B,IAAtBV,EAAWW,OAAeX,EAAaP,GAG5B3B,KAAI,SAAAE,GAAC,OAC1B,kBAAC,EAAD,CACI4C,IAAO5C,EAAEvB,GACTA,GAAMuB,EAAEvB,GACRwB,KAAQD,EAAEC,KACVC,MAASF,EAAEE,MACXG,KAAQL,EAAEK,KACVc,YAAeA,OAIvB,OACI,oCACA,2BACI1C,GAAG,SACH4B,KAAK,OACLwC,YAAY,mBACZC,MAAOhB,EACPiB,SAvEa,SAACV,GAClBN,EAAUM,EAAEC,OAAOQ,UAwEnB,yBAAKrE,GAAG,UACJL,UAAWsD,EAAY,OAAS,QAChC,kBAAC,EAAD,iBACQD,EAAQG,GADhB,CAEIN,cA9CZ,SAAuBe,GAEnB,GAA6B,SAAzBA,EAAEC,OAAOU,QAAQC,IAAe,CAChC,IAAIC,EAAOtB,EAAY,KAAO,EAAIH,EAAQkB,OAAS,EAAIf,EAAY,EACnEC,EAAaqB,GAGjB,GAA6B,SAAzBb,EAAEC,OAAOU,QAAQC,IAAe,CAChC,IAAIE,EAAOvB,EAAY,IAAMH,EAAQkB,OAAS,EAAIf,EAAY,EAC9DC,EAAasB,KAsCThC,YAAeA,MAGvB,yBAAK/C,UAAU,WACf,wBAAIK,GAAG,WACDU,EAAa,wBAAIV,GAAG,WAAP,cAAqCiE,M,MCrFjDU,MAVf,WACE,OACE,yBAAKhF,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,uBAAGK,GAAG,gBAAgB4E,KAAK,QAA3B,SCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ef6abdc0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.4b41f8bb.png\";","import React from 'react';\nimport pokeball from './pokeball.png';\n\nfunction Pokeball(){\n    return ( \n        <img className=\"rotate\" src={pokeball} alt=\"pokeball\" /> \n    );\n}\n\nexport default Pokeball;","import React from 'react';\nimport Pokeball from './Pokeball'\n\nfunction Header(){\n    return (\n        <>\n            <header>\n                <div id='overlay'></div>\n                <h1 id=\"title\"> \n                    <Pokeball /> \n                    Pokedex  \n                    <Pokeball />\n                </h1>\n            </header>\n        </>\n    )\n}\n\nexport default Header;","import {useState, useEffect} from 'react';\nimport axios from 'axios';\n\nconst BASE_URL = 'https://pokeapi.co/api/v2/pokemon';\n\nfunction useAxios(start=1,end=150){\n    const [responses, setResponse] = useState([]);\n    const [errors, setErrors] = useState(null);\n    const [isLoading, setIsLoading] = useState(true);\n\n    /** get pokemon data from API */\n    useEffect(() => {\n        const getData = async () =>{\n            try{\n                let results = [];\n        \n                for (let i = start; i <= end; i++) {\n                    let resp = await axios.get(`${BASE_URL}/${i}`);\n                    results.push(resp.data);\n                }\n                    \n                results.map(r => {                    \n                        setResponse(p => [...p,\n                        {\n                            name: r.name,\n                            id: r.id,\n                            image: r.sprites['front_default'],\n                            shiny: r.sprites['front_shiny'],\n                            type: r.types.map(type => type.type.name).join('/').toUpperCase(),\n                            abilities: r.abilities.map(ability => ability.ability.name).join(', '),                           \n                            stats: r.stats.map(stat => {\n                                return {name: stat.stat.name, base: stat.base_stat}\n                        })\n                    }\n                        ])\n                    });                   \n            } catch (err) {\n                setErrors(err);\n            }\n            /** set 'isLoading' to false when all data is received */\n            setIsLoading(false);\n        }\n\n        /** getData on page load */\n        if (isLoading){\n            getData();\n        }\n    }, []);\n    return [responses, errors, isLoading];\n}\n\nexport default useAxios;","import React from 'react';\n\nfunction Card(props){\n    return (\n        <>\n        <li id={props.id} className=\"card\" onClick={props.toggleModal}>\n            <img className=\"card-image\" src={props.image} alt={props.name} />\n            <h2 className=\"card-title\"> {props.id}.{props.name} </h2>\n            <p className=\"card-subtitle\">Type: {props.type}</p> \n        </li>\n        </>\n    )\n}\n\nexport default Card;","import React from 'react';\n\nfunction Modal(props){\n    /** need to make a duplicate of 'props.stats' b/c state can't be manipulated as a 'const' */\n    let stats; \n    if(props.stats){\n       stats = props.stats.map(stat => (\n            <span className=\"modal-stat\">{stat.name[0].toUpperCase() + stat.name.slice(1)}: {stat.base} </span>\n        ));\n    }\n\n    return (\n        <>\n            <div onClick={props.toggleModal} className=\"modal-overlay\">\n                <div className=\"modal-cycle-container\">\n                    <div onClick={props.navigateModal} data-nav=\"prev\" className=\"modal-button modal-prev\">\n                        <span data-nav=\"prev\"> &#60; </span>\n                    </div>\n                </div>\n                <div className=\"modal-card\">\n                    <div className=\"modal-images\">\n                        <img className=\"card-image\" src={props.image} alt=\"{props.name}\"/>\n                        <img className=\"card-image\" src={props.shiny} alt=\"{props.name}\"/>\n                    </div>\n                    <div className=\"modal-text\">\n                        <h2 className=\"card-title modal-title\"> {props.id}.{props.name} </h2> \n                        <p className=\"card-subtitle modal-text\">Type: {props.type}</p>\n                        <p className=\"card-subtitle modal-text\">Abilities: {props.abilities}</p>\n                        <p className=\"card-subtitle modal-text modal-stats\">{stats}</p>\n                    </div> \n                </div>\n                <div className=\"modal-cycle-container\">\n                    <div onClick={props.navigateModal} data-nav=\"next\" className=\"modal-button modal-next\">\n                        <span data-nav=\"next\"> &#62; </span>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Modal;","import React, {useState, useEffect} from 'react';\nimport useAxios from '../hooks/useAxios';\nimport Card from './Card';\nimport Modal from './Modal';\n\nfunction Pokedex(){\n    // State to store pokemon\n    const [pokemon, errors, isLoading] = useAxios(1,150);\n    // State to display Modal\n    const [modalShow, setModalShow] = useState(false);\n    // State to display which Pokemon on Modal\n    const [pokeModal, setPokeModal] = useState(null);\n    // State to filter pokemon type\n    const[search, setSearch] = useState('');\n    const [searchPoke, setSearchPoke] = useState([]);\n\n    /** updates state of search field */\n    const handleChange = (e) =>{\n        setSearch(e.target.value);\n    }\n\n    /** if user is making search, update 'searchPoke' to display matched pokemon types */\n    useEffect(() =>{        \n        const results = pokemon.filter(p => p.type.toLowerCase().includes(search));        \n        setSearchPoke(results);\n    },[search, setSearch])\n\n\n    /** Toggle's modal and get's card's 'id' for 'pokModal' */\n    const toggleModal = (e) => {\n\n        /** Should only be able to toggle Modal if clicking outside of \n         * Modal when Modal is open or when Modal is closed */\n        if(e.target.className === 'modal-overlay' || !modalShow){\n            setModalShow( m => m = !m);\n\n            /** reset pokeModal */\n            if(modalShow){\n                setPokeModal(null);\n            } else {\n                /** set 'pokeModal' id to display in Modal */\n                const parent = e.target.closest('li');        \n                setPokeModal(parent.id - 1);\n            }\n        }\n    }\n\n    /** Define 'navigateModal' as a 'function' b/c using 'const' will give us errors when re-using 'navigateModal' */\n    function navigateModal(e) {\n        /** handle 'previous' pokemon 'pokeModal' */\n        if (e.target.dataset.nav === 'prev'){\n            let prev = pokeModal - 1 === -1 ? pokemon.length - 1 : pokeModal - 1;\n            setPokeModal(prev);\n        }\n        /** handle 'next' pokemon 'pokeModal' */\n        if (e.target.dataset.nav === 'next'){\n            let next = pokeModal + 1 === pokemon.length ? 0 : pokeModal + 1;\n            setPokeModal(next);\n        }                \n    }\n\n    /** return error screen if error has ocurred */\n    if (errors){\n        return (<h3 id=\"Loading\" >Sorry, an error has occurred!</h3>)\n    }\n\n    /** will use 'display' to determine to show filtered search or all pokemon */\n    let display = searchPoke.length !== 0 ? searchPoke : pokemon;\n\n    /** build Card component for pokemon */\n    const pokemons = display.map(p => (\n        <Card\n            key = {p.id}\n            id = {p.id}\n            name = {p.name} \n            image = {p.image}\n            type = {p.type}\n            toggleModal = {toggleModal}\n        />\n    ));\n\n    return (\n        <>\n        <input \n            id=\"filter\" \n            type=\"text\" \n            placeholder=\"Pokemon Types...\" \n            value={search}\n            onChange={handleChange}\n        />\n        <div id=\"overlay\" \n            className={modalShow ? \"show\" : \"hide\"}>\n            <Modal \n                {...pokemon[pokeModal]} \n                navigateModal={navigateModal} \n                toggleModal = {toggleModal}\n        />\n        </div>\n        <div className=\"Pokedex\">\n        <ol id=\"pokedex\">\n            { isLoading ? (<h3 id=\"Loading\" >Loading...</h3>) : pokemons }\n        </ol>\n        </div>\n        </>\n    )\n}\n\nexport default Pokedex;","import React from 'react';\nimport Header from './components/Header';\nimport PokeDex from './components/Pokedex';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Header />\n      <PokeDex />\n      <a id=\"scroll-to-top\" href=\"#top\">TOP</a>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}